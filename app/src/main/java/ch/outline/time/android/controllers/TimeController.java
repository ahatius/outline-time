package ch.outline.time.android.controllers;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.widget.TextView;
import android.widget.Toast;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.joda.time.DateTime;

import java.util.ArrayList;
import java.util.List;

import ch.outline.time.android.R;
import ch.outline.time.android.configuration.Configuration;
import ch.outline.time.android.requests.CookieStringRequest;
import ch.outline.time.android.requests.InsertTimeRequest;
import ch.outline.time.android.requests.LoginRequest;
import ch.outline.time.android.singletons.RequestQueueSingleton;

/**
 * Created by Ahatius on 23.01.2016.
 */
public class TimeController implements SharedPreferences.OnSharedPreferenceChangeListener {
    private String balance;

    private String user;
    private String password;
    private String session;

    private RequestQueue rq;

    private Context context;

    /**
     * Gets the request queue and login information upon initialization
     * @param context
     */
    public TimeController(Context context) {
        this.rq = RequestQueueSingleton.getInstance(context.getApplicationContext()).getRequestQueue();
        this.context = context;
        this.user = PreferenceManager.getDefaultSharedPreferences(this.context).getString("username", "");
        this.password = PreferenceManager.getDefaultSharedPreferences(this.context).getString("password", "");
    }

    /**
     * Logs in to the application and executes a Runnable after the login
     * @param runnable The runnable to run when the login was successful
     */
    private void login(final Runnable runnable) {
        LoginRequest request = new LoginRequest(this, Configuration.LOGIN_URL, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                runnable.run();
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                System.out.println("LOGIN FAILED");
                System.out.println(error.getCause());

                Toast.makeText(TimeController.this.context, TimeController.this.context.getString(R.string.error_login), Toast.LENGTH_SHORT).show();
            }
        });

        rq.add(request);
    }

    /**
     * Starts all actions needed to insert a new time
     */
    public void addTime(){
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                TimeController.this.retrieveModalToken();
            }
        };

        this.login(runnable);
    }

    /**
     * The server creates an unique token each time a time wants to be inserted. This method reads this token from the HTML
     */
    private void retrieveModalToken() {
        CookieStringRequest request = new CookieStringRequest(this, Request.Method.GET, Configuration.TOKEN_URL + this.generateTimestamp() + "", new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                TimeController.this.insertTime(TimeController.this.extractModalTokenFromResponse(response));
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                System.out.println("Network error, caused by:");
                System.out.println(error.getCause());

                Toast.makeText(TimeController.this.context, TimeController.this.context.getString(R.string.error_token), Toast.LENGTH_SHORT).show();
            }
        });

        rq.add(request);
    }

    /**
     * Extracts the token using substring (Token is between "&token=" and "\" target=")
     * @param response The HTML response received from the server
     * @return The token generated by the server
     */
    private String extractModalTokenFromResponse(String response) {
        return response.substring(response.indexOf("&token=") + 7, response.indexOf("\" target="));
    }

    private void insertTime(String token) {
        InsertTimeRequest request = new InsertTimeRequest(this, Configuration.INSERT_URL + this.generateTimestamp() + "&token=" + token, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                Toast.makeText(TimeController.this.context, TimeController.this.context.getString(R.string.success), Toast.LENGTH_SHORT).show();
                TimeController.this.updateCurrentBalanceField();
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                System.out.println("Network error, caused by:");
                System.out.println(error.getCause());

                Toast.makeText(TimeController.this.context, TimeController.this.context.getString(R.string.error_insertion), Toast.LENGTH_SHORT).show();
            }
        });

        rq.add(request);
    }

    public void updateCurrentBalanceField() {
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                CookieStringRequest request = new CookieStringRequest(TimeController.this, Request.Method.GET, Configuration.LOGIN_URL, new Response.Listener<String>() {
                    @Override
                    public void onResponse(String response) {
                        TimeController.this.balance = extractBalanceFromResponse(response);
                        ((TextView)((Activity) TimeController.this.context).findViewById(R.id.currentBalanceValue)).setText(TimeController.this.balance);
                    }
                }, new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {

                    }
                });

                TimeController.this.rq.add(request);
            }
        };

        this.login(runnable);
    }

    private String extractBalanceFromResponse(String response) {
        return response.substring(response.indexOf("Zeitsaldo</td><td class=td_background_tag align=left>") + 53, response.indexOf("</td></tr><tr><td class='alert alert-success' align=left>Feriensaldo"));
    }

    /**
     * Constructs an array containing date information
     * @return an String array that contains, in this order, the day of month, the month, the year, the hour of the day and the minute of the hour
     */
    public String[] getDateArray() {
        DateTime dt = new DateTime();
        List<String> values = new ArrayList<String>();

        values.add(String.valueOf(dt.getDayOfMonth()));
        values.add(String.valueOf(dt.getMonthOfYear()));
        values.add(String.valueOf(dt.getYear()));
        values.add(String.valueOf(dt.getHourOfDay()));
        values.add(String.valueOf(dt.getMinuteOfHour()));

        return values.toArray(new String[values.size()]);
    }

    /**
     * Generates a UNIX-Timestamp
     * @return long UNIX-Timestamp
     */
    private long generateTimestamp() {
        return System.currentTimeMillis() / 1000L;
    }

    /**
     * Updates the login information, should they be changed
     * @param sharedPreferences
     * @param s
     */
    @Override
    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String s) {
        this.user = sharedPreferences.getString("username", "");
        this.password = sharedPreferences.getString("password", "");
    }

    public String getSession() {
        return session;
    }

    public void setSession(String session) {
        this.session = session;
    }

    public String getUser() {
        return user;
    }

    public void setUser(String user) {
        this.user = user;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
